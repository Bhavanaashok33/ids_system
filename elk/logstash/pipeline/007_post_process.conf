filter {
  if "bro" in [tags] {

	# Bro logs have a high quality timestamp, so let's copy that to @timestamp.
	# Before we do, let's copy the existing logstash @timestamp to timestamp.

    if [duration] == "-" {
      mutate {
        replace => [ "duration", "0" ]
      }
    }
    if [src_bytes] == "-" {
      mutate {
        replace => [ "src_bytes", "0" ]
      }
    }
    # If MissedBytes is unspecified set it to zero so it is an integer
    if [missed_bytes] == "-" {
      mutate {
        replace => [ "missed_bytes", "0" ]
      }
    }
    # If OriginalIPBytes is unspecified set it to zero so it is an integer
    if [src_ip_bytes] == "-" {
      mutate {
        replace => [ "src_ip_bytes", "0" ]
      }
    }
    # If RespondBytes is unspecified set it to zero so it is an integer
    if [dst_bytes] == "-" {
      mutate {
        replace => [ "dst_bytes", "0" ]
      }
    }
    # If RespondIPBytes is unspecified set it to zero so it is an integer
    if [dst_ip_bytes] == "-" {
      mutate {
        replace => [ "dst_ip_bytes", "0" ]
      }
    }
    if [sP] == "-" {
      mutate {
        remove_field => ["sP"]
      }
    }
    if [dP] == "-" {
      mutate {
        remove_field => ["dP"]
      }
    }
    if [host] == "-" {
      mutate {
        remove_field => ["host"]
      }
    }


    # I renamed conn_uids to uid so that it is easy to pivot to all things tied to a connection
    mutate {
       rename => [ "connection_uids", "uid" ]
    }
    # If total_bytes is set to "-" change it to 0 so it is an integer
    if [total_bytes] == "-" {
      mutate {
        replace => [ "total_bytes", "0" ]
      }
    }
    # If seen_bytes is set to "-" change it to 0 so it is an integer
    if [seen_bytes] == "-" {
      mutate {
        replace => [ "seen_bytes", "0" ]
      }
    }
    # If missing_bytes is set to "-" change it to 0 so it is an integer
    if [missing_bytes] == "-" {
      mutate {
        replace => [ "missing_bytes", "0" ]
      }
    }
    # If overflow_bytes is set to "-" change it to 0 so it is an integer
    if [overflow_bytes] == "-" {
      mutate {
        replace => [ "overflow_bytes", "0" ]
      }
    }
    if [dcc_file_size] == "-" {
      mutate {
        replace => [ "dcc_file_size", "0" ]
      }
    }
    if [auth_attempts] == "-" {
      mutate {
        replace => [ "auth_attempts", "0" ]
      }
    }


    # I recommend changing the field types below to integer or floats so searches can do greater than or less than
    # and also so math functions can be ran against them
    mutate {
      convert => [ "sP", "integer" ]
      convert => [ "dP", "integer" ]
      convert => [ "depth", "integer" ]
      #convert => [ "duration", "float" ]
      convert => [ "info_code", "integer" ]
      convert => [ "missed_bytes", "integer" ]
      convert => [ "missing_bytes", "integer" ]
      convert => [ "notice_n", "integer" ]
      convert => [ "src_bytes", "integer" ]
      convert => [ "src_packets", "integer" ]
      convert => [ "src_ip_bytes", "integer" ]
      convert => [ "overflow_bytes", "integer" ]
      convert => [ "notice_port", "integer" ]
      convert => [ "query_class", "integer" ]
      convert => [ "query_type", "integer" ]
      convert => [ "rcode", "integer" ]
      convert => [ "request_body_len", "integer" ]
      convert => [ "request_p", "integer" ]
      convert => [ "dst_bytes", "integer" ]
      convert => [ "dst_packets", "integer" ]
      convert => [ "dst_ip_bytes", "integer" ]
      convert => [ "response_body_len", "integer" ]
      convert => [ "seen_bytes", "integer" ]
      convert => [ "status_code", "integer" ]
      #convert => [ "suppress_for", "float" ]
      convert => [ "total_bytes", "integer" ]
      convert => [ "trans_depth", "integer" ]
      convert => [ "transaction_id", "integer" ]
      convert => [ "version", "string" ]

    }


  }
}
